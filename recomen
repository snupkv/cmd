import { vi, describe, it, expect, beforeEach } from 'vitest';
import { SecretServiceV2 } from './secretService';
import { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';

vi.mock('@aws-sdk/client-secrets-manager', async () => {
  return {
    SecretsManagerClient: vi.fn().mockImplementation(() => ({
      send: vi.fn().mockResolvedValue({
        SecretString: JSON.stringify({ key1: 'value1' })
      })
    })),
    GetSecretValueCommand: vi.fn()
  };
});

describe('SecretServiceV2', () => {
  let service: SecretServiceV2;

  beforeEach(() => {
    service = SecretServiceV2.getInstance();
    process.env = {
      ...process.env,
      AWS_REGION: 'us-east-1',
      'SECRET_MANAGER_test/key1': 'test/key1',
      HTTP_PROXY: 'http://localhost:8080',
      HTTPS_PROXY: 'http://localhost:8080',
      NODE_ENV: 'localhost',
      AWS_ACCESS_KEY_ID: 'dummy',
      AWS_SECRET_ACCESS_KEY: 'dummy',
      AWS_SESSION_TOKEN: 'dummy'
    };
  });

  it('should return the singleton instance', () => {
    const instance = SecretServiceV2.getInstance();
    expect(instance).toBeDefined();
    expect(instance).toBe(service);
  });

  it('should initialize the SecretsManagerClient with config', () => {
    const client = service.initializeClient();
    expect(client).toBeDefined();
    expect(SecretsManagerClient).toHaveBeenCalled();
  });

  it('should fetch secret entries from process.env', () => {
    const entries = service['getSecretEntries']();
    expect(entries.length).toBeGreaterThan(0);
    expect(entries[0]).toHaveProperty('key');
    expect(entries[0]).toHaveProperty('value');
  });

  it('should read all secrets and call fetchAndSetSecret', async () => {
    const spy = vi.spyOn(service as any, 'fetchAndSetSecret').mockResolvedValue(undefined);
    await service.readAllSecrets();
    expect(spy).toHaveBeenCalled();
  });

  it('should fetch and set a secret when not cached', async () => {
    const readSecrets: any[] = [];
    await service['fetchAndSetSecret']({ key: 'SECRET_MANAGER_test/key1', value: 'test/key1' }, 'cof/cos/BABAINTEGRATEDCHANNELMANAGEMENT/', readSecrets);
    expect(readSecrets.length).toBeGreaterThan(0);
  });

  it('should set secret from cache when found', () => {
    const mockSecret = { secretName: 'test', secretResponse: JSON.stringify({ key1: 'value1' }) };
    service['setSecretFromCache']('SECRET_MANAGER_test/key1', mockSecret, 'key1');
    expect(process.env['SECRET_MANAGER_test/key1']).toBe('value1');
  });

  it('should fetch secret from manager if not in cache', async () => {
    const readSecrets: any[] = [];
    await service['fetchSecretFromManager']('SECRET_MANAGER_test/key1', 'test/key1', 'key1', readSecrets);
    expect(readSecrets.length).toBeGreaterThan(0);
    expect(process.env['SECRET_MANAGER_test/key1']).toBe('value1');
  });
});
